"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryRouter = exports.BaseRouter = void 0;
var events_1 = require("events");
var url_1 = require("url");
var querystring_1 = require("querystring");
/**
 * Creates a URL from a pathname + query.
 * Injects query params into the URL slugs, the same way that next/router does.
 */
function getRouteAsPath(pathname, query) {
    var remainingQuery = __assign({}, query);
    // Replace slugs, and remove them from the `query`
    var asPath = pathname.replace(/\[(.+?)]/g, function ($0, slug) {
        var value = remainingQuery[slug];
        delete remainingQuery[slug];
        return encodeURIComponent(String(value));
    });
    // Append remaining query as a querystring, if needed:
    var qs = querystring_1.stringify(remainingQuery);
    if (qs)
        asPath = asPath + "?" + qs;
    return asPath;
}
/**
 * A base implementation of NextRouter that does nothing; all methods throw.
 */
var BaseRouter = /** @class */ (function () {
    function BaseRouter() {
        var _this = this;
        this.isReady = false;
        this.route = "";
        this.pathname = "";
        this.query = {};
        this.asPath = "";
        this.basePath = "";
        this.isFallback = false;
        this.events = new events_1.EventEmitter();
        this.push = function (url) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error("NotImplemented");
            });
        }); };
        this.replace = function (url) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error("NotImplemented");
            });
        }); };
        this.back = function () {
            throw new Error("NotImplemented");
        };
        this.beforePopState = function () {
            throw new Error("NotImplemented");
        };
        this.prefetch = function () {
            throw new Error("NotImplemented");
        };
        this.reload = function () {
            throw new Error("NotImplemented");
        };
    }
    return BaseRouter;
}());
exports.BaseRouter = BaseRouter;
/**
 * An implementation of NextRouter that does not change the URL, but just stores the current route in memory.
 *
 * Currently only supports the `push` and `replace` methods.
 * TODO: Implement more methods!
 */
var MemoryRouter = /** @class */ (function (_super) {
    __extends(MemoryRouter, _super);
    function MemoryRouter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.push = function (url) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.setMemoryRoute(url);
                return [2 /*return*/, true];
            });
        }); };
        _this.replace = function (url) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.setMemoryRoute(url);
                return [2 /*return*/, true];
            });
        }); };
        /**
         * Sets the current route to the specified url.
         * @param url - String or Url-like object
         */
        _this.setMemoryRoute = function (url) {
            // Parse the URL if needed:
            var urlObject = typeof url === "string" ? url_1.parse(url, true) : url;
            _this.pathname = urlObject.pathname || "";
            _this.query = urlObject.query || {};
            _this.asPath = getRouteAsPath(_this.pathname, _this.query);
            _this.events.emit("routeChangeComplete");
        };
        return _this;
    }
    return MemoryRouter;
}(BaseRouter));
exports.MemoryRouter = MemoryRouter;
//# sourceMappingURL=MemoryRouter.js.map