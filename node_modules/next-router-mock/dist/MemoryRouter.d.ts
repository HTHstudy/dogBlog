/// <reference types="node" />
import { EventEmitter } from "events";
import { UrlWithParsedQuery } from "url";
import { ParsedUrlQuery } from "querystring";
import type { NextRouter } from "next/router";
declare type UrlObject = {
    pathname: UrlWithParsedQuery["pathname"];
    query?: UrlWithParsedQuery["query"];
};
declare type Url = string | UrlObject;
/**
 * A base implementation of NextRouter that does nothing; all methods throw.
 */
export declare abstract class BaseRouter implements NextRouter {
    isReady: boolean;
    route: string;
    pathname: string;
    query: ParsedUrlQuery;
    asPath: string;
    basePath: string;
    isFallback: boolean;
    events: EventEmitter;
    push: (url: Url) => Promise<boolean>;
    replace: (url: Url) => Promise<boolean>;
    back: () => never;
    beforePopState: () => never;
    prefetch: () => never;
    reload: () => never;
}
/**
 * An implementation of NextRouter that does not change the URL, but just stores the current route in memory.
 *
 * Currently only supports the `push` and `replace` methods.
 * TODO: Implement more methods!
 */
export declare class MemoryRouter extends BaseRouter {
    push: (url: Url) => Promise<boolean>;
    replace: (url: Url) => Promise<boolean>;
    /**
     * Sets the current route to the specified url.
     * @param url - String or Url-like object
     */
    setMemoryRoute: (url: Url) => void;
}
export {};
